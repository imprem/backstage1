app:
  title: Backstage App
  baseUrl: http://localhost:3000

  proxy:
    endpoints:
      '/puppetdb':
       target: https://your.puppetdb.instance.com

organization:
  name: Mphasis

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  
  # database:
  #   client: better-sqlite3
  #   connection: ':memory:'
  
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir
  # database:
  #   connection:
  #       host: localhost
  #       port: 5432
  #       user: postgres
  #       password: root

  database:
    client: pg
    connection:
      host: localhost
      port: 5432
      user: postgres
      password: root
      # database: my_backstage_db


integrations:
  github:
    - host: github.com
      token: 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
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

# proxy:
  ## Example for how to add a proxy endpoint for the frontend.
  ## A typical reason to do this is to handle HTTPS and CORS for internal services.
  # endpoints:
  #   '/test':
  #     target: 'https://example.com'
  #     changeOrigin: true

proxy:
 endpoints:
 '/uselessfacts/api':
 changeOrigin: true
 target: 'https://uselessfacts.jsph.pl'
 secure: false

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'local' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

# techdocs:
#   builder: 'local' 
#   generator:
#     runIn: 'docker'
#   publisher:
#     type: 'local'

auth:
  environment: development
  providers:
    github:
      development:
        clientId: efdb922398b0ccdfd4d0
        clientSecret: df304e4b1f954242c0b47b3bcf017eaa7a8de305
        signIn:
          resolvers:
            - resolver: emailMatchingUserEntityProfileEmail
            - resolver: emailLocalPartMatchingUserEntityName
            - resolver: usernameMatchingUserEntityName
  # see https://backstage.io/docs/auth/ to learn about auth providers
  # providers:
  #   # See https://backstage.io/docs/auth/guest/provider
  #   guest: {}

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:

    - type: file
      target: ../catalog-model/examples/components/react-app1.yaml

    - type: file
      target: ../catalog-model/examples/components/weather-app.yaml

    - type: file
      target: ../catalog-model/examples/components/tokenBalance-app.yaml

    - type: file
      target: ../catalog-model/examples/components/productDetails-app.yaml

    - type: file
      target: ../catalog-model/examples/systems/sp-demo.yaml

    - type: file
      target: ../catalog-model/examples/systems/test-app.yaml

    # Example component for TechDocs
    - type: file
      target: ../catalog-model/examples/documented-component/catalog-info.yaml

    # - type: file
    #   target: ../catalog-model/examples/all.yaml

    # - type: file
    #   target: ../catalog-model/examples/acme/team-a-group.yaml

    # - type: file
    #   target: ../catalog-model/examples/acme/org.yaml

    # Local example data, file locations are relative to the backend process, typically `packages/backend`
    - type: file
      target: ../../examples/entities.yaml

    # Local example template
    - type: file
      target: ../../examples/template/template.yaml
      rules:
        - allow: [Template]

    # - type: file
    #   target: ../../exampless/template/template.yaml
    #   rules:
    #     - allow: [Template]
    #   - type: file
    #     target: template.yaml

    # - type: url
    #   target: https://github.com/backstage/software-templates/blob/main/scaffolder-templates/react-ssr-template/template.yaml
    #   rules:
    #     - allow: [Template]
    # - type: file
    #   target: ../../exampless/template/template.yaml

    # Local example organizational data
    - type: file
      target: ../../examples/org.yaml
      rules:
        - allow: [User, Group]
    
    - type: file
      target: ../../my-custom-template/template.yaml
      rules:
        - allow: [Template]

    ## Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    ## Uncomment these lines to add an example org
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
    #   rules:
    #     - allow: [User, Group]
